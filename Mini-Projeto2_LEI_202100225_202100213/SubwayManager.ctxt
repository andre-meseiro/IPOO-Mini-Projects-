#BlueJ class context
comment0.target=SubwayManager
comment0.text=\r\n\ Classe\ respons\u00E1vel\ pelo\ funcionamento\ da\ aplica\u00E7\u00E3o.\ Centraliza\ a\ informa\u00E7\u00E3o\ e\ intera\u00E7\u00E3o\ com\ o\ utilizador.\r\n\r\n\ @author\ Grupo3\ (Andr\u00E9\ Meseiro\ -\ 202100225\ 202100225@estudantes.ips.pt\ e\ Rodrigo\ Elias\ -\ 202100213\ 202100213@estudantes.ipt.pt)\r\n\ @version\ 23/12/2021\r\n
comment1.params=
comment1.target=SubwayManager()
comment1.text=\r\n\ Construtor\ da\ classe\ SubwayManager.\ Inicializa\ a\ base\ de\ dados\ com\ informa\u00E7\u00E3o\ da\ aplica\u00E7\u00E3o\ e\ o\ menu\ de\ intera\u00E7\u00E3o\ com\ o\ utilizador.\r\n
comment10.params=originLine\ destination
comment10.target=Station\ getStationLinkedToDestination(SubwayLine,\ java.lang.String)
comment10.text=\r\n\ Obt\u00E9m\ uma\ esta\u00E7\u00E3o\ em\ determinada\ linha\ que\ cont\u00E9m\ liga\u00E7\u00E3o\ com\ a\ outra\ esta\u00E7\u00E3o\ de\ destino.\r\n\r\n\ @param\ originLine\ -\ linha\ de\ origem\ onde\ dever\u00E1\ existir\ uma\ esta\u00E7\u00E3o\ de\ liga\u00E7\u00E3o\r\n\ @param\ destination\ -\ esta\u00E7\u00E3o\ de\ destino\r\n\ @return\ esta\u00E7\u00E3o\ de\ correspond\u00EAncia,\ que\ efetua\ a\ liga\u00E7\u00E3o\ entre\ a\ linha\ de\ origem\ e\ a\ esta\u00E7\u00E3o\ de\ destino\r\n
comment11.params=originPosition\ destinationPosition\ line
comment11.target=Station[]\ createRoute(int,\ int,\ SubwayLine)
comment11.text=\r\n\ Tra\u00E7a\ um\ percurso\ entre\ a\ esta\u00E7\u00E3o\ de\ origem\ e\ a\ esta\u00E7\u00E3o\ de\ destino\r\n\r\n\ @param\ originPosition\ -\ esta\u00E7\u00E3o\ onde\ inicia\ o\ percurso\r\n\ @param\ destinationPosition\ -\ esta\u00E7\u00E3o\ onde\ finaliza\ o\ percurso\r\n\ @param\ line\ -\ linha\ onde\ o\ percurso\ dever\u00E1\ ser\ efetuado\r\n\ @return\ array\ de\ esta\u00E7\u00F5es\ com\ todas\ as\ esta\u00E7\u00F5es\ percorridas,\ da\ esta\u00E7\u00E3o\ de\ origem\ \u00E0\ esta\u00E7\u00E3o\ de\ destino\r\n
comment2.params=name\ nif\ birthDate
comment2.target=boolean\ createPassenger(java.lang.String,\ java.lang.String,\ java.lang.String)
comment2.text=\r\n\ Cria\ um\ passageiro\ na\ base\ de\ dados.\r\n\r\n\ @param\ name\ -\ nome\ do\ passageiro\r\n\ @param\ nif\ -\ nif\ do\ passageiro\r\n\ @param\ birthdate\ -\ data\ de\ nascimento\ do\ passageiro\r\n
comment3.params=nif
comment3.target=boolean\ deletePassenger(java.lang.String)
comment3.text=\r\n\ Elimina\ um\ passageiro\ existente\ na\ base\ de\ dados,\ caso\ exista\r\n\r\n\ @param\ nif\ -\ nif\ do\ passageiro\r\n\ @return\ o\ sucesso\ da\ opera\u00E7\u00E3o.\ True\ caso\ sucesso,\ false\ caso\ contr\u00E1rio.\r\n
comment4.params=nif
comment4.target=void\ showPassenger(java.lang.String)
comment4.text=\r\n\ Apresenta\ informa\u00E7\u00E3o\ de\ um\ passageiro\ existente.\r\n\r\n\ @param\ nif\ -\ nif\ do\ passageiro\r\n
comment5.params=nif
comment5.target=boolean\ addStudentStatus(java.lang.String)
comment5.text=\r\n\ Marca\ um\ passageiro\ com\ estatuto\ de\ estudante.\r\n\r\n\ @param\ nif\ -\ nif\ do\ passageiro\r\n\ @return\ o\ sucesso\ da\ opera\u00E7\u00E3o.\ True\ caso\ sucesso,\ false\ caso\ contr\u00E1rio.\r\n
comment6.params=origin\ destination
comment6.target=Route\ traceRoute(java.lang.String,\ java.lang.String)
comment6.text=\r\n\ Tra\u00E7a\ um\ percurso\ que\ permite\ determinar\ todas\ as\ esta\u00E7\u00F5es\ percorridas,\ da\ esta\u00E7\u00E3o\ de\ inicio\ \u00E1\ esta\u00E7\u00E3o\ de\ destino.\ Dever\u00E1\ considerar\ as\ situa\u00E7\u00F5es\ da\ esta\u00E7\u00E3o\ de\ origem\ e\ de\ destino\ encontrarem-se\ na\ mesma\ linha,\ ou\ em\ linhas\ diferentes.\ Neste\ caso,\ dever\u00E1\ considerar\ a\ mudan\u00E7a\ entre\ linhas.\r\n\r\n\ @param\ origin\ -\ esta\u00E7\u00E3o\ de\ origem\r\n\ @param\ destination\ -\ esta\u00E7\u00E3o\ de\ destino\r\n\ @return\ rota\ criada\ com\ base\ nas\ esta\u00E7\u00F5es\ de\ origem\ e\ de\ destino\r\n
comment7.params=origin\ destination\ startDay\ startMonth\ startYear\ startHours\ startMinutes\ startSeconds\ finishDay\ finishMonth\ finishYear\ finishHours\ finishMinutes\ finishSeconds\ nif
comment7.target=Trip\ makeTrip(java.lang.String,\ java.lang.String,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ java.lang.String)
comment7.text=\r\n\ Permite\ efetuar\ uma\ viagem.\ A\ viagem\ \u00E9\ efetuada\ com\ base\ na\ esta\u00E7\u00E3o\ de\ origem\ e\ destino,\ recebe\ tamb\u00E9m\ a\ hora\ e\ data\ de\ inicio\ e\ de\ fim.\ esta\ viagem\ ficar\u00E1\ associada\ a\ um\ passageiro.\ Ap\u00F3s\ a\ viagem,\ o\ hist\u00F3rico\ da\ mesma\ dever\u00E1\ ser\ associada\ ao\ passageiro,\ bem\ como\ o\ custo\ asssociado\ debitado\ do\ seu\ cart\u00E3o\ de\ viagem.\r\n\r\n\ @param\ origin\ -\ nome\ da\ esta\u00E7\u00E3o\ de\ origem\r\n\ @param\ destination\ -\ nome\ da\ esta\u00E7\u00E3o\ de\ destino\r\n\ @param\ initialTime\ -\ data\ e\ hora\ do\ in\u00EDcio\ da\ viagem\r\n\ @param\ finalTime\ -\ data\ e\ hora\ do\ final\ da\ viagem\r\n\ @param\ nif\ -\ NIF\ do\ passageiro\r\n\ @return\ a\ viagem\ realizada\r\n
comment8.params=nif
comment8.target=void\ showTripHistory(java.lang.String)
comment8.text=\r\n\ Apresenta\ o\ hist\u00F3rico\ de\ viagens\ de\ um\ determinado\ passageiro.\r\n\r\n\ @param\ nif\ -\ NIF\ do\ passageiro\r\n
comment9.params=st1\ st2
comment9.target=Station[]\ concatStations(Station[],\ Station[])
comment9.text=\r\n\ M\u00E9todo\ auxiliar\ que\ concatena\ dois\ arrays\ de\ esta\u00E7\u00F5es\ num\ array\ \u00FAnico.\r\n\r\n\ @param\ st1\ -primeiro\ array\ de\ esta\u00E7\u00F5es\r\n\ @param\ st2\ -\ segundo\ array\ de\ esta\u00E7\u00F5es\r\n\ @return\ array\ resultante\ da\ concatena\u00E7\u00E3o\ dos\ dois\ arrays\ recebidos\r\n
numComments=12
