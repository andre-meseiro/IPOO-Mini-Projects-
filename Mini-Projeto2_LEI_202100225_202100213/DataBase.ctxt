#BlueJ class context
comment0.target=DataBase
comment0.text=\r\n\ Classe\ respons\u00E1vel\ pelo\ armazenamento\ e\ manipula\u00E7\u00E3o\ de\ dados\ da\ aplica\u00E7\u00E3o.\r\n\r\n\ @author\ Grupo3\ (Andr\u00E9\ Meseiro\ -\ 202100225\ 202100225@estudantes.ips.pt\ e\ Rodrigo\ Elias\ -\ 202100213\ 202100213@estudantes.ipt.pt)\r\n\ @version\ 23/12/2021\r\n
comment1.params=
comment1.target=DataBase()
comment1.text=\r\n\ Construtor\ da\ classe\ DataBase.\ Dever\u00E1\ inicializar\ os\ arrays\ respons\u00E1veis\ por\ armazenar\ os\ dados\ da\ aplica\u00E7\u00E3o.\r\n
comment10.params=origin\ destination
comment10.target=SubwayLine\ lineWithBothStations(java.lang.String,\ java.lang.String)
comment10.text=\r\n\ Retorna\ a\ linha\ de\ metro\ onde\ exista\ duas\ esta\u00E7\u00F5es\ espec\u00EDficas.\r\n\r\n\ @param\ origin\ -\ esta\u00E7\u00E3o\ de\ origem\ a\ procurar\r\n\ @param\ destination\ -\ esta\u00E7\u00E3o\ de\ destino\ a\ procurar\r\n\ @return\ a\ linha,\ caso\ exista\r\n
comment2.params=passenger
comment2.target=boolean\ addPassenger(Passenger)
comment2.text=\r\n\ Adiciona\ um\ novo\ passageiro\ ao\ array.\ N\u00E3o\ poder\u00E1\ existir\ passageiros\ com\ NIFs\ iguais.\r\n\r\n\ @param\ passenger\ -\ passageiro\ a\ adicionar\ ao\ array\r\n\ @return\ o\ sucesso\ da\ opera\u00E7\u00E3o.\ True\ caso\ sucesso,\ false\ caso\ contr\u00E1rio.\r\n
comment3.params=nif
comment3.target=boolean\ deletePassenger(java.lang.String)
comment3.text=\r\n\ Elimina\ um\ passageiro\ do\ array\ de\ passageiros.\ Todas\ as\ posi\u00E7\u00F5es\ do\ array\ dever\u00E3o\ ser\ ajustadas,\ de\ forma\ a\ n\u00E3o\ haver\ elementos\ vazios\ entre\ os\ passageiros\ existentes\ no\ array,\r\n\r\n\ @param\ nif\ -\ o\ passageiro\ a\ eliminar\r\n\ @return\ o\ sucesso\ da\ opera\u00E7\u00E3o.\ True\ caso\ sucesso,\ false\ caso\ contr\u00E1rio.\r\n
comment4.params=nif
comment4.target=boolean\ existPassenger(java.lang.String)
comment4.text=\r\n\ Valida\ a\ exist\u00EAncia\ de\ um\ passageiro\ com\ o\ NIF\ igual.\r\n\r\n\ @param\ nif\ -\ NIF\ a\ validar\r\n\ @return\ true\ caso\ exista,\ false\ caso\ contr\u00E1rio\r\n
comment5.params=nif
comment5.target=int\ getPositionOfPassenger(java.lang.String)
comment5.text=\r\n\ Indica\ a\ posi\u00E7\u00E3o\ que\ um\ passageiro\ ocupa\ no\ array\r\n\r\n\ @param\ nif\ -\ NIF\ do\ passageiro\r\n\ @return\ posicao\ no\ array.\ -1\ caso\ n\u00E3o\ exista.\r\n
comment6.params=zone
comment6.target=double\ getPriceOfZone(int)
comment6.text=\r\n\ Retorna\ o\ pre\u00E7o\ correspondente\ ao\ n\u00BA\ de\ zonas\ percorridas.\r\n\r\n\ @param\ zone\ -\ numero\ de\ zonas\ percorridas\r\n\ @return\ pre\u00E7o\ correspondente,\ -1\ caso\ n\u00E3o\ exista\r\n
comment7.params=
comment7.target=void\ increasePassengers()
comment7.text=\r\n\ Duplica\ o\ array\ caso\ este\ esteja\ cheio.\ O\ tamanho\ do\ array\ dever\u00E1\ ser\ o\ dobro\ do\ tamanho\ atual.\ Dever\u00E1\ passar\ todos\ os\ elementos\ existentes\ no\ array\ para\ o\ novo\ array\ criado.\r\n
comment8.params=nif
comment8.target=Passenger\ getPassengerByNIF(java.lang.String)
comment8.text=\r\n\ Retorna\ um\ passageiro\ registado\ na\ aplica\u00E7\u00E3o,\ pelo\ seu\ NIF.\r\n\r\n\ @param\ nif\ -\ NIF\ do\ passageiro\r\n\ @return\ passageiro\ caso\ exista\r\n
comment9.params=station
comment9.target=SubwayLine\ lineWithStation(java.lang.String)
comment9.text=\r\n\ Retorna\ a\ linha\ de\ metro\ onde\ exista\ determinada\ esta\u00E7\u00E3o.\r\n\r\n\ @param\ station\ -\ esta\u00E7\u00E3o\ a\ procurar\r\n\ @return\ a\ linha,\ caso\ exista\r\n
numComments=11
